*Getopt.txt*   Write option-parsing code

Author: Patrick Conley <patrick.bj.conley@gmail.com>
Last change: 2012 Jun 07

1. Using Getopt                  |Getopt|
2. Use examples                  |Getopt_examples|
3. Writing filetype classes      |Getopt_filetype|
4. Testing filetype classes      |Getopt_test|

==============================================================================
1. Using Getopt                                    *Getopt*

Getopt does not use any mappings, and has only two commands and one
configurable setting.

:Getopt     will prompt you to enter series of program options, which will be
            appended to the line under the cursor as calls to getopt or
            appropriate.

            Typically, not all data will need to be entered for a given
            option. Prompts that are left blank will be ignored. Use Ctrl-C to
            stop input at any point.

            See help files on Getopt_<filetype> for details on the data used
            by each filetype's module.

:Getopttest runs a short series of tests on the filetype functions for the
            current file. Validation is necessarily incomplete, as I can't
            properly predict what input is expected for a given filetype. See
            a few more details in |Getopt_test|. Depends on VimTAP.

==============================================================================
2. Use examples                                    *Getopt_examples*

The following is an example of a call to Getopt in a simple C program, msg.c.
The program will either read from a file and print to STDOUT, or write a
message to the file.

Calls to the program are like this:
>
            msg --read
            msg --write [arg]
            msg --help
<
It can equally accept short options.

Getopt will write the option-parsing string if called like this:
>
            :Getopt
            opt list > argv
            opt num > argc
            =====
            short name > w
            long name > write
            has arg > 1
            action >
            -----
            short name > r
            long name > read
            has arg > 0
            action >
            -----
            short name > h
            long name > help
            has arg > 0
            action > help();
            -----
            short name > 
<
The following text will be appended to the current line of msg.c:
>
            static struct option long_opts[] = {
               { "write", 1, NULL, 'w' },
               { "read", 0, NULL, 'r' },
               { "help", 0, NULL, 'h' },
            };

            int c;
            while ( ( c = getopt_long( argc, argv, "w:rh", long_opts, NULL ) ) != -1 )
            {
               switch(c)
               {
                  case 'w':
                     // --write [arg] action here
                     break;
                  case 'r':
                     // --read action here
                     break;
                  case 'h':
                     help();
                     break;
               }
            }
<
See |Getopt_C| for details.

==============================================================================
3. Writing filetype modules                        *Getopt_write_filetype*

A Getopt module for a new filetype should be put in
|$VIMRUNTIME|/autoload/Getopt/<filetype>.vim. It must define the following
functions:
>
      function Getopt#<filetype>#ft.New()
      function Getopt#<filetype>#ft.Validate( option hash ) dict
      function Getopt#<filetype>#ft.Validate_global( global option hash ) dict
      function Getopt#<filetype>#ft.Write() dict
<
These functions are described in detail below. Other functions can be defined
as needed, provided they don't attempt to overwrite functions in the
|Getopt#Filetype| class.

A help file ought to be created for each module, describing in some detail its
keys. The help can be put in any appropriate doc/ directory, but should be
named 'Getopt_<filetype>' for consistency.

------------------------------------------------------------------------------
New()                                              *Getopt_write_new*

The ft.New() method must return a copy of itself with the internal variables
self.opt_keys and (optionally) self.global_keys set.

'opt_keys' is a list of hashes containing the data recognized in an option for
this language. Each piece eof keys in turn will be requested of the user. The
only recognized keys in each hash are 'name' and 'default'.

'global_keys' is a similar list of hashes identifying data needed globally. 

Mine look something like:
>
      function Getopt#c#ft.New() dict

         let harness = copy( self )
         let harness.opt_keys = [ { 'name':'short_name' },
                             \ { 'name':'long_name' },
                             \ { 'name':'has_arg', 'default':0 },
                             \ { 'name':'action' } ]
         let harness.global_keys = [ { 'name':'opt_array','default':'argv' },
                                \ { 'name':'opt_num', 'default':'argc' } ]
                                
         return harness
      endfunc
<

------------------------------------------------------------------------------
Validate() and Validate_global()                   *Getopt_write_validate*

ft.Validate() should take as input a hash containing input data for a single
option and return either true or false (obviously depending on whether
appropriate information has been entered).
>
      function Getopt#c#ft.Validate(D) dict " validate C opt data
         " short_name and has_arg are required
         if ( empty( a:D.short_name ) || empty( a:D.action ) )
            return 0
         " long_name (if it exists) must be a string
         else if ( ! empty( a:D.long_name ) && type( a:D.long_name ) != 1 )
            return 0
         " has_arg must be 0, 1, or 2
         else if ( type( a:D.has_arg ) != 0 || a:D:has_arg !~ '^[012]$' )
            return 0
         else
            return 1
         endif
      endfunc

<

ft.Validate_global() works similarly, but will only be called once.

------------------------------------------------------------------------------
Write()                                            *Getopt_write_write*

The last required function should use the data in the list 'self.opt_data' and
the hash 'self.global_data' to create and return a string or list which will
be printed to the buffer. If it returns a list, each element will be printed
on a separate line.

'opt_data' will be a list of  hashes checked by .Validate().
'global_data' will be the hash checked by .Validate_global().

I won't bother to post sample code, as it's lengthy rather than interesting.

==============================================================================
4. Testing filetype classes                        *Getopt_test*

>
      :Getopttest
<
This command runs a series of tests on the filetype module for the file in the
active buffer. The tests aren't meant to be comprehensive (because I don't
know what kind of data a given filetype will require), but should let you know
if you've done something really stupid.

Running tests requires |VimTAP|, at
http://www.vim.org/scripts/script.php?script_id=2213

vim:tw=78:ft=help:norl:
