*Getopt_internal.txt*   Implementation details of Getopt

                                                   *Getopt_internal*

Author: Patrick Conley <patrick.bj.conley@gmail.com>
Last change: 2012 Jun 21

1. Functions         |Getopt_internal_functions|
2. Classes           |Getopt_internal_classes|
2a.                     |Getopt#Filetype|
2b.                     |Getopt#Saved|
3. Filetype modules  |Getopt_internal_filetype|
4. Tests             |Getopt_internal_tests|
5. Bugs (and todo)   |Getopt_internal_bugs|

==============================================================================
1. Functions                                       *Getopt_internal_functions*

There are two functions meant to be accessed from outside the script (in the
two defined commands Getopt and Getopttest, to be specific): Getopt#Run() and
Getopt#Test() >
         Run
<     Creates or reloads an instance of |Getopt#Filetype|, performs basic
validation on the instance (full validation is performed by Test()), and
passes it as an argument to the internal functions to get, validate, and write
option strings. Exceptions caused by user error (eg., calling Getopt on a
filetype with no ft module defined, entering no input, etc.) are echoed and
returned; internal errors not caught elsewhere are left uncaught.
      Arguments: none; optional list of non-interactive input
>
         Test
<     Creates an instance of |Getopt#Filetype| and runs tests on it. Unchanged
from the non-class-based version.
      Arguments: none

There are some internal functions used by these two.
For Run: >
         _Get_input
<     Reads input: Gets the hashes of keys from |Getopt#Filetype|, prompts the
      user for input, passes the input to the validator, and sets the data
      arrays in the Filetype object.
      Arguments: a Filetype object
>
         _Rename_for_input
<     performs some very basic renaming of a key to improve readability.
      Arguments: a single key

For Test: >
         _Test_data
<     Tests that the keys used be Filetype.global_keys and Filetype.opt_keys
      are conformant.
      Arguments: opt_keys or global_keys

==============================================================================
2. Classes                                         *Getopt_internal_classes*

Getopt is implemented using two classes: >
         Getopt#Filetype
         Getopt#Saved
<

==============================================================================
2a. Getopt#Filetype                                *Getopt#Filetype*

This class contains all the data used in a call to Getopt. My hope is that
(the current|some future) version will instantiate multiple objects of this
class if it gets called on multiple.ft_dict within a single session, so that
last_global and last_opts can be reused more universally.

------------------------------------------------------------------------------
Data: >
         global_keys
<     List of information that will be needed once. Set by
      |Getopt#{&ft}#ft|.New()
>
         opt_keys
<     List of data needed to generate each opt string. Set by
      |Getopt#{&ft}#ft|.New()
>
         global_data
<     Hash of validated global data. Set by Getopt#Run()
>
         opt_data
<     List of validated option hashes. Set by Getopt#Run()
>
         last_global
<     Hash of valid global data from last run. Set by |Getopt#Filetype|.Save()
>
         last_opts  
<     List of valid local data hashes from the last run. Set by
      |Getopt#Filetype|.Save()
>
         input
<     List of data to be used as non-interactive option data. Set by
      |Getopt#Filetype|.SetInputList()

------------------------------------------------------------------------------
Methods: >
         .New()
<     Create a new Getopt#Filetype object, call .Init and the filetype's
      autoload file, and return the object.
      See vimtap.
      Arguments: None (If the filetype is 't', used for testing, it takes the
      four flags described in |Getopt_internal_tests|.)
>
         .Init()
<     Set initial/default values for all the data.
      Arguments: None
>
         .Save()
<     Copy opt_data and .global_data to last_* and reset *data to default
      values. Call |Getopt#Saved|.SetFt to save the entire Filetype object
      Arguments: None
>
         .HasData()
<     Check that .opt_data (and .global_data, if appropriate) are non-empty
      lists. No validation on the contents of these lists is performed
      Arguments: None
>
         .SetInputList()
<     Sets the non-interactive input list .input and performs basic
      validation.  Checks only that it's a list of length
      len(global_keys)+i*len(opt_keys)
      Arguments: a list of input data
>
         .Validate
<     From the filetype class. Check if a single hash of data is valid.
      Arguments: a hash of per-option data
>
         .Validate_global
<     From the filetype class. Check if a hash of global data is valid.
      Optional if .global_keys is undefined
      Arguments: a hash of global data
>
         .Write
<     From the filetype class. Create and return a string or list out of
      the data in .opt_data and .global_data. Or from anything else, really,
      but that'd be dumb.
      Arguments: None

==============================================================================
2b. Getopt#Saved                                   *Getopt#Saved*

Getopt#Saved is a static class of |Getopt#Filetype| objects which have already
been run. It allows only setting and getting a specific object

------------------------------------------------------------------------------
Data: >
         ft_dict
<     A dictionary storing all the Getopt#Filetype objects in the class.
      Exists mainly for namespacing reasons.

------------------------------------------------------------------------------
Methods: >
         .New()
<     NO SUCH METHOD. The static class shouldn't have provisions for
      initializing copies of itself.
>
         .Init()
<     Set class data to default values.
      Arguments: None
>
         .SetFt()
<     Add the given Filetype object to the .ft_dict dictionary
      Arguments: a filetype and a Filetype object
>
         .GetFt()
<     Try to return the appropriate filetype object.
      Arguments: a filetype
>
         .CheckFt()
<     Return whether or not a filetype object exists in the .ft_dict dict.
      Arguments: a filetype

==============================================================================
3. Filetype modules                                *Getopt_internal_filetype*
                                                   *Getopt#{&ft}#ft*

The filetype classes are subclasses of |Getopt#Filetype|. Their .New methods
create and return an object of the class as normal, but this object is
immediately appended to the Filetype object.

Methods: >
         .New()
<     Create and return a copy of the object; set .opt_keys and .global_keys.
      May set initial values of any internal variables.
      Arguments: None
>
         .Validate()
         .Validate_global()
         .Write()
<     are all as described in |Getopt_internal_classes|.

==============================================================================
4. Unit Tests                                      *Getopt_internal_tests*

Unit tests are run from t/, and are based on the |VimTAP| plugin.

Getopt#t#ft
------------------------------------------------------------------------------

Tests are based on the filetype 't', whose module has a number of flags
defined that change its behaviour. All flags are set to defaults that allow it
to run successfully

There are three binary flags:
>
         g:Getopt_var_flags (max 7)
         g:Getopt_func_flags (max 7)
         g:Getopt_func_opt_flag (max 15)
<

The bits of g:Getopt_var_flags control which internal variables are defined by
ft.New():
>
         1: defines opt_keys
         2: defines global_keys
         4: defines input
         default: 5
<
g:Getopt_func_flags controls which functions the filetype module defines:
>
         1: Validate()
         2: Validate_global()
         4: Write()
         default: 5
<
g:Getopt_func_opt_flag controls whether each defined function is allowed to
take more/fewer arguments than defined in |Getopt_write_filetype|. If a
function is undefined, the corresponding bit of Getopt_func_opt_flag has no
effect:
>
         1: New() requires no inputs
         2: Validate_global() requires a single input
         4: Validate() requires a single input
         8: Write() requires no arguments
         default: 15

There is one extra configuration variable >
         g:Getopt_write_output
< which is an integer setting the output type of ft.Write() to a string (1),
list (2), hash (3), or nothing (4).

If the flags are set through these variables they will act persistently. If
they are instead passed as arguments to Getopt#Filetype.New or
Getopt#t#ft.New(), they will only act on that instantiation. If a flag is set
to less than zero in the function parameters, its default will be used.

------------------------------------------------------------------------------
Getopt#Test

Getopt#Test tests the validity of a filetype module. Run the function on
autoload/Getopt/t.vim under various flag combinations to ensure it matches the
desired output.

Getopt::Test should return a failing result if the following bits are unset:
>
         g:Getopt_var_flags: 1
         g:Getopt_func_flags: 5
         g:Getopt_func_opt_flag: 13

Test: each value of each flag
Test: a few (dozen? hundred? depends on how much processing it takes)
      randomly-selected combinations of flags (requires ruby support)

Test: that string and list Write() output pass, and other types fail

Note: to use VimTAP for both Getopt#Test and t/ tests, reassign the global
test harness, then instantiate a new VimTAP object under the global harness:
>
         " t/ tests ...
         let outer_harness = vimtap#TheHarness
         let vimtap#TheHarness = vimtap#StandardHarness.New('')
         " Getopt#Test ...
         call vimtap#FlushOutput()
         let vimtap#TheHarness = vimtap#OuterHarness
         " continue t/ tests ...
<
Note: I can generate a random number with the following:
>
         function! Rand(max)
            ruby << EOF
               rmax = VIM::evaluate("a:max")
               rmax = nil if rmax == ""
               VIM::command( "let random = " + rand(rmax).to_s )
            EOF
            return random
         endfunction
<

-------------------------------------------------------------------------------
Getopt#Saved (done)

Test: .Init() runs without exception
Test: .Init() empties .ft_dict

Test: .SetFt() passes hashes
Test: .SetFt() fails non-hashes

Test: .CheckFt(), .GetFt() return expected values

-------------------------------------------------------------------------------
Getopt#Filetype (done)

Test: .New() returns a new Getopt#Filetype object
Test: .New() throws exception if filetype class doesn't exist
Test: .New() throws exception on unset ft.opt_keys

Test: .Init() resets all member variables

Test: .Save() resets ft.opt_data and ft.global_data
Test: .Save() adds (or overwrites) Saved.ft_dict.ft

Test: .HasData() returns true if data has been entered into ft.opt_data and
      (if appropriate) ft.global_data

Test: .SetInputList() sets Filetype.input
Test: .SetInputList() throws exception if argument is not a list

-------------------------------------------------------------------------------
Getopt#_Rename_for_input (done)

Test: a variety of key names with known results

-------------------------------------------------------------------------------
Getopt#_Get_input (done)

Test: throws exception if opt_keys is not defined

Test: passes valid per-opt data 
Test: ignores invalid per-opt data
Test: passes valid global data
Test: throws exception on invalid global data

-------------------------------------------------------------------------------
Getopt#Run

Test: aborts cleanly on unknown filetype
Note: from current t/filetype.vim

Test: uses saved ft object if it exists
Test: uses new ft object if it doesn't
Test: aborts cleanly if ft.opt_keys is undefined
Test: aborts cleanly if no data is entered
Note: broadly from current t/data.vim

Test: a number of complete calls
Note: from current t/filetype.vim

==============================================================================
5. Bugs (and todo list)                            *Getopt_bugs*

- should set defaults in get_input() to the options entered in the last run
- allow filetype modules to define valid and invalid input for tests
- in autoload/Getopt/t.vim, set flags as parameters to .New()
- tests on SetInputList should check that the list contains an appropriate
  number of elements
- _Get_Input should throw an exception if global_keys but not Validate_global
  is defined
- Getopt#t#ft.New() should automatically define a valid .input for whatever
  options are set

vim:tw=78:ft=help:norl:nospell
